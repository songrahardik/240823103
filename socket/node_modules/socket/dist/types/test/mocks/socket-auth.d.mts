export declare const MOCK_API_TOKEN = "mock_socket_api_token_1234567890";
export declare const MOCK_ORG_NAME = "test-org";
export declare const MOCK_ORG_ID = "org_123456";
/**
 * Mock authentication flow response.
 */
export interface MockAuthResponse {
    success: boolean;
    token?: string;
    error?: string;
    org?: {
        id: string;
        name: string;
    };
}
/**
 * Mock the interactive login flow.
 * Simulates opening browser, polling for auth completion.
 */
export declare function mockInteractiveLogin(options?: {
    shouldSucceed?: boolean;
}): import("vitest").Mock<(...args: any[]) => any>;
/**
 * Mock configuration storage for auth tokens.
 */
export declare function mockConfigStorage(): {
    get: import("vitest").Mock<(key: string) => any>;
    set: import("vitest").Mock<(key: string, value: any) => boolean>;
    unset: import("vitest").Mock<(key: string) => boolean>;
    has: import("vitest").Mock<(key: string) => boolean>;
    clear: import("vitest").Mock<() => void>;
    storage: Map<string, any>;
};
/**
 * Mock API client with authentication.
 */
export declare function mockAuthenticatedApiClient(options?: {
    isAuthenticated?: boolean;
}): {
    isAuthenticated: import("vitest").Mock<(...args: any[]) => any>;
    getToken: import("vitest").Mock<(...args: any[]) => any>;
    setToken: import("vitest").Mock<(...args: any[]) => any>;
    clearToken: import("vitest").Mock<(...args: any[]) => any>;
    validateToken: import("vitest").Mock<(...args: any[]) => any>;
    getOrganizations: import("vitest").Mock<(...args: any[]) => any>;
};
/**
 * Mock browser opener for OAuth flow.
 */
export declare function mockBrowserOpener(): import("vitest").Mock<(...args: any[]) => any>;
/**
 * Mock OAuth polling mechanism.
 */
export declare function mockOAuthPoller(options?: {
    shouldSucceed?: boolean;
    pollCount?: number;
}): import("vitest").Mock<(...args: any[]) => any>;
/**
 * Complete mock setup for login command testing.
 */
export declare function setupLoginMocks(options?: {
    authenticated?: boolean;
    loginShouldSucceed?: boolean;
}): {
    config: {
        get: import("vitest").Mock<(key: string) => any>;
        set: import("vitest").Mock<(key: string, value: any) => boolean>;
        unset: import("vitest").Mock<(key: string) => boolean>;
        has: import("vitest").Mock<(key: string) => boolean>;
        clear: import("vitest").Mock<() => void>;
        storage: Map<string, any>;
    };
    apiClient: {
        isAuthenticated: import("vitest").Mock<(...args: any[]) => any>;
        getToken: import("vitest").Mock<(...args: any[]) => any>;
        setToken: import("vitest").Mock<(...args: any[]) => any>;
        clearToken: import("vitest").Mock<(...args: any[]) => any>;
        validateToken: import("vitest").Mock<(...args: any[]) => any>;
        getOrganizations: import("vitest").Mock<(...args: any[]) => any>;
    };
    browserOpener: import("vitest").Mock<(...args: any[]) => any>;
    authFlow: import("vitest").Mock<(...args: any[]) => any>;
    // Helper to verify login completed.
    expectLoginSuccess: () => void;
    // Helper to verify logout completed.
    expectLogoutSuccess: () => void;
};
//# sourceMappingURL=socket-auth.d.mts.map
/**
 * JSON output validation utilities for testing CLI commands.
 * Ensures JSON outputs match expected Socket CLI response format.
 *
 * Expected formats:
 * - Success: { ok: true, data: unknown, message?: string }
 * - Failure: { ok: false, data?: unknown, message: string, cause?: string, code?: number }
 */
export type SocketJsonSuccess<T = unknown> = {
    ok: true;
    data: T;
    message?: string;
};
export type SocketJsonError = {
    ok: false;
    data?: unknown;
    message: string;
    cause?: string;
    code?: number;
};
export type SocketJsonResponse<T = unknown> = SocketJsonSuccess<T> | SocketJsonError;
/**
 * Validates that a string contains valid JSON matching Socket CLI response format.
 * @param jsonString - The JSON string to validate
 * @param expectedExitCode - Expected exit code (0 for success, non-zero for failure)
 * @returns Parsed JSON if valid, throws if invalid
 */
export declare function validateSocketJson<T = unknown>(jsonString: string, expectedExitCode: number): SocketJsonResponse<T>;
/**
 * Helper to check if response is a success response.
 */
export declare function isSocketJsonSuccess<T = unknown>(response: SocketJsonResponse<T>): response is SocketJsonSuccess<T>;
/**
 * Helper to check if response is an error response.
 */
export declare function isSocketJsonError<T = unknown>(response: SocketJsonResponse<T>): response is SocketJsonError;
//# sourceMappingURL=json-output-validation.d.mts.map